/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.nlp;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-27")
public class PosNerChunk implements org.apache.thrift.TBase<PosNerChunk, PosNerChunk._Fields>, java.io.Serializable, Cloneable, Comparable<PosNerChunk> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PosNerChunk");

    private static final org.apache.thrift.protocol.TField WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("word", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PosNerChunkStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PosNerChunkTupleSchemeFactory();

    public String word; // required
    public String tag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        WORD((short) 1, "word"),
        TAG((short) 2, "tag");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // WORD
                    return WORD;
                case 2: // TAG
                    return TAG;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.WORD, new org.apache.thrift.meta_data.FieldMetaData("word", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PosNerChunk.class, metaDataMap);
    }

    public PosNerChunk() {
    }

    public PosNerChunk(
            String word,
            String tag) {
        this();
        this.word = word;
        this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PosNerChunk(PosNerChunk other) {
        if (other.isSetWord()) {
            this.word = other.word;
        }
        if (other.isSetTag()) {
            this.tag = other.tag;
        }
    }

    public PosNerChunk deepCopy() {
        return new PosNerChunk(this);
    }

    @Override
    public void clear() {
        this.word = null;
        this.tag = null;
    }

    public String getWord() {
        return this.word;
    }

    public PosNerChunk setWord(String word) {
        this.word = word;
        return this;
    }

    public void unsetWord() {
        this.word = null;
    }

    /** Returns true if field word is set (has been assigned a value) and false otherwise */
    public boolean isSetWord() {
        return this.word != null;
    }

    public void setWordIsSet(boolean value) {
        if (!value) {
            this.word = null;
        }
    }

    public String getTag() {
        return this.tag;
    }

    public PosNerChunk setTag(String tag) {
        this.tag = tag;
        return this;
    }

    public void unsetTag() {
        this.tag = null;
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
        return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
        if (!value) {
            this.tag = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case WORD:
                if (value == null) {
                    unsetWord();
                } else {
                    setWord((String) value);
                }
                break;

            case TAG:
                if (value == null) {
                    unsetTag();
                } else {
                    setTag((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case WORD:
                return getWord();

            case TAG:
                return getTag();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case WORD:
                return isSetWord();
            case TAG:
                return isSetTag();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PosNerChunk)
            return this.equals((PosNerChunk) that);
        return false;
    }

    public boolean equals(PosNerChunk that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_word = true && this.isSetWord();
        boolean that_present_word = true && that.isSetWord();
        if (this_present_word || that_present_word) {
            if (!(this_present_word && that_present_word))
                return false;
            if (!this.word.equals(that.word))
                return false;
        }

        boolean this_present_tag = true && this.isSetTag();
        boolean that_present_tag = true && that.isSetTag();
        if (this_present_tag || that_present_tag) {
            if (!(this_present_tag && that_present_tag))
                return false;
            if (!this.tag.equals(that.tag))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetWord()) ? 131071 : 524287);
        if (isSetWord())
            hashCode = hashCode * 8191 + word.hashCode();

        hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
        if (isSetTag())
            hashCode = hashCode * 8191 + tag.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(PosNerChunk other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetWord()).compareTo(other.isSetWord());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWord()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word, other.word);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTag()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PosNerChunk(");
        boolean first = true;

        sb.append("word:");
        if (this.word == null) {
            sb.append("null");
        } else {
            sb.append(this.word);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("tag:");
        if (this.tag == null) {
            sb.append("null");
        } else {
            sb.append(this.tag);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class PosNerChunkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public PosNerChunkStandardScheme getScheme() {
            return new PosNerChunkStandardScheme();
        }
    }

    private static class PosNerChunkStandardScheme extends org.apache.thrift.scheme.StandardScheme<PosNerChunk> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, PosNerChunk struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // WORD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.word = iprot.readString();
                            struct.setWordIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TAG
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.tag = iprot.readString();
                            struct.setTagIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, PosNerChunk struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.word != null) {
                oprot.writeFieldBegin(WORD_FIELD_DESC);
                oprot.writeString(struct.word);
                oprot.writeFieldEnd();
            }
            if (struct.tag != null) {
                oprot.writeFieldBegin(TAG_FIELD_DESC);
                oprot.writeString(struct.tag);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PosNerChunkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public PosNerChunkTupleScheme getScheme() {
            return new PosNerChunkTupleScheme();
        }
    }

    private static class PosNerChunkTupleScheme extends org.apache.thrift.scheme.TupleScheme<PosNerChunk> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, PosNerChunk struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetWord()) {
                optionals.set(0);
            }
            if (struct.isSetTag()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetWord()) {
                oprot.writeString(struct.word);
            }
            if (struct.isSetTag()) {
                oprot.writeString(struct.tag);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, PosNerChunk struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.word = iprot.readString();
                struct.setWordIsSet(true);
            }
            if (incoming.get(1)) {
                struct.tag = iprot.readString();
                struct.setTagIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

