/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.nlp;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-27")
public class Srl implements org.apache.thrift.TBase<Srl, Srl._Fields>, java.io.Serializable, Cloneable, Comparable<Srl> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Srl");

    private static final org.apache.thrift.protocol.TField A1_FIELD_DESC = new org.apache.thrift.protocol.TField("a1", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField A0_FIELD_DESC = new org.apache.thrift.protocol.TField("a0", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SrlStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SrlTupleSchemeFactory();

    public String a1; // required
    public String a0; // required
    public String v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        A1((short) 1, "a1"),
        A0((short) 2, "a0"),
        V((short) 3, "v");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // A1
                    return A1;
                case 2: // A0
                    return A0;
                case 3: // V
                    return V;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.A1, new org.apache.thrift.meta_data.FieldMetaData("a1", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.A0, new org.apache.thrift.meta_data.FieldMetaData("a0", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Srl.class, metaDataMap);
    }

    public Srl() {
    }

    public Srl(
            String a1,
            String a0,
            String v) {
        this();
        this.a1 = a1;
        this.a0 = a0;
        this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Srl(Srl other) {
        if (other.isSetA1()) {
            this.a1 = other.a1;
        }
        if (other.isSetA0()) {
            this.a0 = other.a0;
        }
        if (other.isSetV()) {
            this.v = other.v;
        }
    }

    public Srl deepCopy() {
        return new Srl(this);
    }

    @Override
    public void clear() {
        this.a1 = null;
        this.a0 = null;
        this.v = null;
    }

    public String getA1() {
        return this.a1;
    }

    public Srl setA1(String a1) {
        this.a1 = a1;
        return this;
    }

    public void unsetA1() {
        this.a1 = null;
    }

    /** Returns true if field a1 is set (has been assigned a value) and false otherwise */
    public boolean isSetA1() {
        return this.a1 != null;
    }

    public void setA1IsSet(boolean value) {
        if (!value) {
            this.a1 = null;
        }
    }

    public String getA0() {
        return this.a0;
    }

    public Srl setA0(String a0) {
        this.a0 = a0;
        return this;
    }

    public void unsetA0() {
        this.a0 = null;
    }

    /** Returns true if field a0 is set (has been assigned a value) and false otherwise */
    public boolean isSetA0() {
        return this.a0 != null;
    }

    public void setA0IsSet(boolean value) {
        if (!value) {
            this.a0 = null;
        }
    }

    public String getV() {
        return this.v;
    }

    public Srl setV(String v) {
        this.v = v;
        return this;
    }

    public void unsetV() {
        this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
        return this.v != null;
    }

    public void setVIsSet(boolean value) {
        if (!value) {
            this.v = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case A1:
                if (value == null) {
                    unsetA1();
                } else {
                    setA1((String) value);
                }
                break;

            case A0:
                if (value == null) {
                    unsetA0();
                } else {
                    setA0((String) value);
                }
                break;

            case V:
                if (value == null) {
                    unsetV();
                } else {
                    setV((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case A1:
                return getA1();

            case A0:
                return getA0();

            case V:
                return getV();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case A1:
                return isSetA1();
            case A0:
                return isSetA0();
            case V:
                return isSetV();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Srl)
            return this.equals((Srl) that);
        return false;
    }

    public boolean equals(Srl that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_a1 = true && this.isSetA1();
        boolean that_present_a1 = true && that.isSetA1();
        if (this_present_a1 || that_present_a1) {
            if (!(this_present_a1 && that_present_a1))
                return false;
            if (!this.a1.equals(that.a1))
                return false;
        }

        boolean this_present_a0 = true && this.isSetA0();
        boolean that_present_a0 = true && that.isSetA0();
        if (this_present_a0 || that_present_a0) {
            if (!(this_present_a0 && that_present_a0))
                return false;
            if (!this.a0.equals(that.a0))
                return false;
        }

        boolean this_present_v = true && this.isSetV();
        boolean that_present_v = true && that.isSetV();
        if (this_present_v || that_present_v) {
            if (!(this_present_v && that_present_v))
                return false;
            if (!this.v.equals(that.v))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetA1()) ? 131071 : 524287);
        if (isSetA1())
            hashCode = hashCode * 8191 + a1.hashCode();

        hashCode = hashCode * 8191 + ((isSetA0()) ? 131071 : 524287);
        if (isSetA0())
            hashCode = hashCode * 8191 + a0.hashCode();

        hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
        if (isSetV())
            hashCode = hashCode * 8191 + v.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Srl other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetA1()).compareTo(other.isSetA1());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetA1()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a1, other.a1);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetA0()).compareTo(other.isSetA0());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetA0()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a0, other.a0);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetV()).compareTo(other.isSetV());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetV()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Srl(");
        boolean first = true;

        sb.append("a1:");
        if (this.a1 == null) {
            sb.append("null");
        } else {
            sb.append(this.a1);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("a0:");
        if (this.a0 == null) {
            sb.append("null");
        } else {
            sb.append(this.a0);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("v:");
        if (this.v == null) {
            sb.append("null");
        } else {
            sb.append(this.v);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SrlStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SrlStandardScheme getScheme() {
            return new SrlStandardScheme();
        }
    }

    private static class SrlStandardScheme extends org.apache.thrift.scheme.StandardScheme<Srl> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Srl struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // A1
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.a1 = iprot.readString();
                            struct.setA1IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // A0
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.a0 = iprot.readString();
                            struct.setA0IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // V
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.v = iprot.readString();
                            struct.setVIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Srl struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.a1 != null) {
                oprot.writeFieldBegin(A1_FIELD_DESC);
                oprot.writeString(struct.a1);
                oprot.writeFieldEnd();
            }
            if (struct.a0 != null) {
                oprot.writeFieldBegin(A0_FIELD_DESC);
                oprot.writeString(struct.a0);
                oprot.writeFieldEnd();
            }
            if (struct.v != null) {
                oprot.writeFieldBegin(V_FIELD_DESC);
                oprot.writeString(struct.v);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SrlTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SrlTupleScheme getScheme() {
            return new SrlTupleScheme();
        }
    }

    private static class SrlTupleScheme extends org.apache.thrift.scheme.TupleScheme<Srl> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Srl struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetA1()) {
                optionals.set(0);
            }
            if (struct.isSetA0()) {
                optionals.set(1);
            }
            if (struct.isSetV()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetA1()) {
                oprot.writeString(struct.a1);
            }
            if (struct.isSetA0()) {
                oprot.writeString(struct.a0);
            }
            if (struct.isSetV()) {
                oprot.writeString(struct.v);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Srl struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.a1 = iprot.readString();
                struct.setA1IsSet(true);
            }
            if (incoming.get(1)) {
                struct.a0 = iprot.readString();
                struct.setA0IsSet(true);
            }
            if (incoming.get(2)) {
                struct.v = iprot.readString();
                struct.setVIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

