/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.nlp;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-27")
public class NlpPayload implements org.apache.thrift.TBase<NlpPayload, NlpPayload._Fields>, java.io.Serializable, Cloneable, Comparable<NlpPayload> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NlpPayload");

    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField NER_FIELD_DESC = new org.apache.thrift.protocol.TField("ner", org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField VERBS_FIELD_DESC = new org.apache.thrift.protocol.TField("verbs", org.apache.thrift.protocol.TType.LIST, (short) 5);
    private static final org.apache.thrift.protocol.TField SRL_FIELD_DESC = new org.apache.thrift.protocol.TField("srl", org.apache.thrift.protocol.TType.LIST, (short) 6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NlpPayloadStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NlpPayloadTupleSchemeFactory();

    public java.util.List<String> words; // required
    public java.util.List<PosNerChunk> pos; // required
    public java.util.List<PosNerChunk> ner; // required
    public java.util.List<PosNerChunk> chunk; // required
    public java.util.List<String> verbs; // required
    public java.util.List<Srl> srl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        WORDS((short) 1, "words"),
        POS((short) 2, "pos"),
        NER((short) 3, "ner"),
        CHUNK((short) 4, "chunk"),
        VERBS((short) 5, "verbs"),
        SRL((short) 6, "srl");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // WORDS
                    return WORDS;
                case 2: // POS
                    return POS;
                case 3: // NER
                    return NER;
                case 4: // CHUNK
                    return CHUNK;
                case 5: // VERBS
                    return VERBS;
                case 6: // SRL
                    return SRL;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PosNerChunk.class))));
        tmpMap.put(_Fields.NER, new org.apache.thrift.meta_data.FieldMetaData("ner", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PosNerChunk.class))));
        tmpMap.put(_Fields.CHUNK, new org.apache.thrift.meta_data.FieldMetaData("chunk", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PosNerChunk.class))));
        tmpMap.put(_Fields.VERBS, new org.apache.thrift.meta_data.FieldMetaData("verbs", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.SRL, new org.apache.thrift.meta_data.FieldMetaData("srl", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Srl.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NlpPayload.class, metaDataMap);
    }

    public NlpPayload() {
    }

    public NlpPayload(
            java.util.List<String> words,
            java.util.List<PosNerChunk> pos,
            java.util.List<PosNerChunk> ner,
            java.util.List<PosNerChunk> chunk,
            java.util.List<String> verbs,
            java.util.List<Srl> srl) {
        this();
        this.words = words;
        this.pos = pos;
        this.ner = ner;
        this.chunk = chunk;
        this.verbs = verbs;
        this.srl = srl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NlpPayload(NlpPayload other) {
        if (other.isSetWords()) {
            java.util.List<String> __this__words = new java.util.ArrayList<String>(other.words);
            this.words = __this__words;
        }
        if (other.isSetPos()) {
            java.util.List<PosNerChunk> __this__pos = new java.util.ArrayList<PosNerChunk>(other.pos.size());
            for (PosNerChunk other_element : other.pos) {
                __this__pos.add(new PosNerChunk(other_element));
            }
            this.pos = __this__pos;
        }
        if (other.isSetNer()) {
            java.util.List<PosNerChunk> __this__ner = new java.util.ArrayList<PosNerChunk>(other.ner.size());
            for (PosNerChunk other_element : other.ner) {
                __this__ner.add(new PosNerChunk(other_element));
            }
            this.ner = __this__ner;
        }
        if (other.isSetChunk()) {
            java.util.List<PosNerChunk> __this__chunk = new java.util.ArrayList<PosNerChunk>(other.chunk.size());
            for (PosNerChunk other_element : other.chunk) {
                __this__chunk.add(new PosNerChunk(other_element));
            }
            this.chunk = __this__chunk;
        }
        if (other.isSetVerbs()) {
            java.util.List<String> __this__verbs = new java.util.ArrayList<String>(other.verbs);
            this.verbs = __this__verbs;
        }
        if (other.isSetSrl()) {
            java.util.List<Srl> __this__srl = new java.util.ArrayList<Srl>(other.srl.size());
            for (Srl other_element : other.srl) {
                __this__srl.add(new Srl(other_element));
            }
            this.srl = __this__srl;
        }
    }

    public NlpPayload deepCopy() {
        return new NlpPayload(this);
    }

    @Override
    public void clear() {
        this.words = null;
        this.pos = null;
        this.ner = null;
        this.chunk = null;
        this.verbs = null;
        this.srl = null;
    }

    public int getWordsSize() {
        return (this.words == null) ? 0 : this.words.size();
    }

    public java.util.Iterator<String> getWordsIterator() {
        return (this.words == null) ? null : this.words.iterator();
    }

    public void addToWords(String elem) {
        if (this.words == null) {
            this.words = new java.util.ArrayList<String>();
        }
        this.words.add(elem);
    }

    public java.util.List<String> getWords() {
        return this.words;
    }

    public NlpPayload setWords(java.util.List<String> words) {
        this.words = words;
        return this;
    }

    public void unsetWords() {
        this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
        return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
        if (!value) {
            this.words = null;
        }
    }

    public int getPosSize() {
        return (this.pos == null) ? 0 : this.pos.size();
    }

    public java.util.Iterator<PosNerChunk> getPosIterator() {
        return (this.pos == null) ? null : this.pos.iterator();
    }

    public void addToPos(PosNerChunk elem) {
        if (this.pos == null) {
            this.pos = new java.util.ArrayList<PosNerChunk>();
        }
        this.pos.add(elem);
    }

    public java.util.List<PosNerChunk> getPos() {
        return this.pos;
    }

    public NlpPayload setPos(java.util.List<PosNerChunk> pos) {
        this.pos = pos;
        return this;
    }

    public void unsetPos() {
        this.pos = null;
    }

    /** Returns true if field pos is set (has been assigned a value) and false otherwise */
    public boolean isSetPos() {
        return this.pos != null;
    }

    public void setPosIsSet(boolean value) {
        if (!value) {
            this.pos = null;
        }
    }

    public int getNerSize() {
        return (this.ner == null) ? 0 : this.ner.size();
    }

    public java.util.Iterator<PosNerChunk> getNerIterator() {
        return (this.ner == null) ? null : this.ner.iterator();
    }

    public void addToNer(PosNerChunk elem) {
        if (this.ner == null) {
            this.ner = new java.util.ArrayList<PosNerChunk>();
        }
        this.ner.add(elem);
    }

    public java.util.List<PosNerChunk> getNer() {
        return this.ner;
    }

    public NlpPayload setNer(java.util.List<PosNerChunk> ner) {
        this.ner = ner;
        return this;
    }

    public void unsetNer() {
        this.ner = null;
    }

    /** Returns true if field ner is set (has been assigned a value) and false otherwise */
    public boolean isSetNer() {
        return this.ner != null;
    }

    public void setNerIsSet(boolean value) {
        if (!value) {
            this.ner = null;
        }
    }

    public int getChunkSize() {
        return (this.chunk == null) ? 0 : this.chunk.size();
    }

    public java.util.Iterator<PosNerChunk> getChunkIterator() {
        return (this.chunk == null) ? null : this.chunk.iterator();
    }

    public void addToChunk(PosNerChunk elem) {
        if (this.chunk == null) {
            this.chunk = new java.util.ArrayList<PosNerChunk>();
        }
        this.chunk.add(elem);
    }

    public java.util.List<PosNerChunk> getChunk() {
        return this.chunk;
    }

    public NlpPayload setChunk(java.util.List<PosNerChunk> chunk) {
        this.chunk = chunk;
        return this;
    }

    public void unsetChunk() {
        this.chunk = null;
    }

    /** Returns true if field chunk is set (has been assigned a value) and false otherwise */
    public boolean isSetChunk() {
        return this.chunk != null;
    }

    public void setChunkIsSet(boolean value) {
        if (!value) {
            this.chunk = null;
        }
    }

    public int getVerbsSize() {
        return (this.verbs == null) ? 0 : this.verbs.size();
    }

    public java.util.Iterator<String> getVerbsIterator() {
        return (this.verbs == null) ? null : this.verbs.iterator();
    }

    public void addToVerbs(String elem) {
        if (this.verbs == null) {
            this.verbs = new java.util.ArrayList<String>();
        }
        this.verbs.add(elem);
    }

    public java.util.List<String> getVerbs() {
        return this.verbs;
    }

    public NlpPayload setVerbs(java.util.List<String> verbs) {
        this.verbs = verbs;
        return this;
    }

    public void unsetVerbs() {
        this.verbs = null;
    }

    /** Returns true if field verbs is set (has been assigned a value) and false otherwise */
    public boolean isSetVerbs() {
        return this.verbs != null;
    }

    public void setVerbsIsSet(boolean value) {
        if (!value) {
            this.verbs = null;
        }
    }

    public int getSrlSize() {
        return (this.srl == null) ? 0 : this.srl.size();
    }

    public java.util.Iterator<Srl> getSrlIterator() {
        return (this.srl == null) ? null : this.srl.iterator();
    }

    public void addToSrl(Srl elem) {
        if (this.srl == null) {
            this.srl = new java.util.ArrayList<Srl>();
        }
        this.srl.add(elem);
    }

    public java.util.List<Srl> getSrl() {
        return this.srl;
    }

    public NlpPayload setSrl(java.util.List<Srl> srl) {
        this.srl = srl;
        return this;
    }

    public void unsetSrl() {
        this.srl = null;
    }

    /** Returns true if field srl is set (has been assigned a value) and false otherwise */
    public boolean isSetSrl() {
        return this.srl != null;
    }

    public void setSrlIsSet(boolean value) {
        if (!value) {
            this.srl = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case WORDS:
                if (value == null) {
                    unsetWords();
                } else {
                    setWords((java.util.List<String>) value);
                }
                break;

            case POS:
                if (value == null) {
                    unsetPos();
                } else {
                    setPos((java.util.List<PosNerChunk>) value);
                }
                break;

            case NER:
                if (value == null) {
                    unsetNer();
                } else {
                    setNer((java.util.List<PosNerChunk>) value);
                }
                break;

            case CHUNK:
                if (value == null) {
                    unsetChunk();
                } else {
                    setChunk((java.util.List<PosNerChunk>) value);
                }
                break;

            case VERBS:
                if (value == null) {
                    unsetVerbs();
                } else {
                    setVerbs((java.util.List<String>) value);
                }
                break;

            case SRL:
                if (value == null) {
                    unsetSrl();
                } else {
                    setSrl((java.util.List<Srl>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case WORDS:
                return getWords();

            case POS:
                return getPos();

            case NER:
                return getNer();

            case CHUNK:
                return getChunk();

            case VERBS:
                return getVerbs();

            case SRL:
                return getSrl();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case WORDS:
                return isSetWords();
            case POS:
                return isSetPos();
            case NER:
                return isSetNer();
            case CHUNK:
                return isSetChunk();
            case VERBS:
                return isSetVerbs();
            case SRL:
                return isSetSrl();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof NlpPayload)
            return this.equals((NlpPayload) that);
        return false;
    }

    public boolean equals(NlpPayload that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_words = true && this.isSetWords();
        boolean that_present_words = true && that.isSetWords();
        if (this_present_words || that_present_words) {
            if (!(this_present_words && that_present_words))
                return false;
            if (!this.words.equals(that.words))
                return false;
        }

        boolean this_present_pos = true && this.isSetPos();
        boolean that_present_pos = true && that.isSetPos();
        if (this_present_pos || that_present_pos) {
            if (!(this_present_pos && that_present_pos))
                return false;
            if (!this.pos.equals(that.pos))
                return false;
        }

        boolean this_present_ner = true && this.isSetNer();
        boolean that_present_ner = true && that.isSetNer();
        if (this_present_ner || that_present_ner) {
            if (!(this_present_ner && that_present_ner))
                return false;
            if (!this.ner.equals(that.ner))
                return false;
        }

        boolean this_present_chunk = true && this.isSetChunk();
        boolean that_present_chunk = true && that.isSetChunk();
        if (this_present_chunk || that_present_chunk) {
            if (!(this_present_chunk && that_present_chunk))
                return false;
            if (!this.chunk.equals(that.chunk))
                return false;
        }

        boolean this_present_verbs = true && this.isSetVerbs();
        boolean that_present_verbs = true && that.isSetVerbs();
        if (this_present_verbs || that_present_verbs) {
            if (!(this_present_verbs && that_present_verbs))
                return false;
            if (!this.verbs.equals(that.verbs))
                return false;
        }

        boolean this_present_srl = true && this.isSetSrl();
        boolean that_present_srl = true && that.isSetSrl();
        if (this_present_srl || that_present_srl) {
            if (!(this_present_srl && that_present_srl))
                return false;
            if (!this.srl.equals(that.srl))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetWords()) ? 131071 : 524287);
        if (isSetWords())
            hashCode = hashCode * 8191 + words.hashCode();

        hashCode = hashCode * 8191 + ((isSetPos()) ? 131071 : 524287);
        if (isSetPos())
            hashCode = hashCode * 8191 + pos.hashCode();

        hashCode = hashCode * 8191 + ((isSetNer()) ? 131071 : 524287);
        if (isSetNer())
            hashCode = hashCode * 8191 + ner.hashCode();

        hashCode = hashCode * 8191 + ((isSetChunk()) ? 131071 : 524287);
        if (isSetChunk())
            hashCode = hashCode * 8191 + chunk.hashCode();

        hashCode = hashCode * 8191 + ((isSetVerbs()) ? 131071 : 524287);
        if (isSetVerbs())
            hashCode = hashCode * 8191 + verbs.hashCode();

        hashCode = hashCode * 8191 + ((isSetSrl()) ? 131071 : 524287);
        if (isSetSrl())
            hashCode = hashCode * 8191 + srl.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(NlpPayload other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWords()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPos()).compareTo(other.isSetPos());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPos()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, other.pos);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNer()).compareTo(other.isSetNer());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNer()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ner, other.ner);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetChunk()).compareTo(other.isSetChunk());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetChunk()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunk, other.chunk);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetVerbs()).compareTo(other.isSetVerbs());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVerbs()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbs, other.verbs);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSrl()).compareTo(other.isSetSrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srl, other.srl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("NlpPayload(");
        boolean first = true;

        sb.append("words:");
        if (this.words == null) {
            sb.append("null");
        } else {
            sb.append(this.words);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("pos:");
        if (this.pos == null) {
            sb.append("null");
        } else {
            sb.append(this.pos);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("ner:");
        if (this.ner == null) {
            sb.append("null");
        } else {
            sb.append(this.ner);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("chunk:");
        if (this.chunk == null) {
            sb.append("null");
        } else {
            sb.append(this.chunk);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("verbs:");
        if (this.verbs == null) {
            sb.append("null");
        } else {
            sb.append(this.verbs);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("srl:");
        if (this.srl == null) {
            sb.append("null");
        } else {
            sb.append(this.srl);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class NlpPayloadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public NlpPayloadStandardScheme getScheme() {
            return new NlpPayloadStandardScheme();
        }
    }

    private static class NlpPayloadStandardScheme extends org.apache.thrift.scheme.StandardScheme<NlpPayload> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, NlpPayload struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // WORDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.words = new java.util.ArrayList<String>(_list0.size);
                                String _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readString();
                                    struct.words.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setWordsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // POS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                                struct.pos = new java.util.ArrayList<PosNerChunk>(_list3.size);
                                PosNerChunk _elem4;
                                for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                    _elem4 = new PosNerChunk();
                                    _elem4.read(iprot);
                                    struct.pos.add(_elem4);
                                }
                                iprot.readListEnd();
                            }
                            struct.setPosIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NER
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                                struct.ner = new java.util.ArrayList<PosNerChunk>(_list6.size);
                                PosNerChunk _elem7;
                                for (int _i8 = 0; _i8 < _list6.size; ++_i8) {
                                    _elem7 = new PosNerChunk();
                                    _elem7.read(iprot);
                                    struct.ner.add(_elem7);
                                }
                                iprot.readListEnd();
                            }
                            struct.setNerIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // CHUNK
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                                struct.chunk = new java.util.ArrayList<PosNerChunk>(_list9.size);
                                PosNerChunk _elem10;
                                for (int _i11 = 0; _i11 < _list9.size; ++_i11) {
                                    _elem10 = new PosNerChunk();
                                    _elem10.read(iprot);
                                    struct.chunk.add(_elem10);
                                }
                                iprot.readListEnd();
                            }
                            struct.setChunkIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // VERBS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                                struct.verbs = new java.util.ArrayList<String>(_list12.size);
                                String _elem13;
                                for (int _i14 = 0; _i14 < _list12.size; ++_i14) {
                                    _elem13 = iprot.readString();
                                    struct.verbs.add(_elem13);
                                }
                                iprot.readListEnd();
                            }
                            struct.setVerbsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // SRL
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                                struct.srl = new java.util.ArrayList<Srl>(_list15.size);
                                Srl _elem16;
                                for (int _i17 = 0; _i17 < _list15.size; ++_i17) {
                                    _elem16 = new Srl();
                                    _elem16.read(iprot);
                                    struct.srl.add(_elem16);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, NlpPayload struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.words != null) {
                oprot.writeFieldBegin(WORDS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
                    for (String _iter18 : struct.words) {
                        oprot.writeString(_iter18);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.pos != null) {
                oprot.writeFieldBegin(POS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pos.size()));
                    for (PosNerChunk _iter19 : struct.pos) {
                        _iter19.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.ner != null) {
                oprot.writeFieldBegin(NER_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ner.size()));
                    for (PosNerChunk _iter20 : struct.ner) {
                        _iter20.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.chunk != null) {
                oprot.writeFieldBegin(CHUNK_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.chunk.size()));
                    for (PosNerChunk _iter21 : struct.chunk) {
                        _iter21.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.verbs != null) {
                oprot.writeFieldBegin(VERBS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.verbs.size()));
                    for (String _iter22 : struct.verbs) {
                        oprot.writeString(_iter22);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.srl != null) {
                oprot.writeFieldBegin(SRL_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.srl.size()));
                    for (Srl _iter23 : struct.srl) {
                        _iter23.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class NlpPayloadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public NlpPayloadTupleScheme getScheme() {
            return new NlpPayloadTupleScheme();
        }
    }

    private static class NlpPayloadTupleScheme extends org.apache.thrift.scheme.TupleScheme<NlpPayload> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, NlpPayload struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetWords()) {
                optionals.set(0);
            }
            if (struct.isSetPos()) {
                optionals.set(1);
            }
            if (struct.isSetNer()) {
                optionals.set(2);
            }
            if (struct.isSetChunk()) {
                optionals.set(3);
            }
            if (struct.isSetVerbs()) {
                optionals.set(4);
            }
            if (struct.isSetSrl()) {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetWords()) {
                {
                    oprot.writeI32(struct.words.size());
                    for (String _iter24 : struct.words) {
                        oprot.writeString(_iter24);
                    }
                }
            }
            if (struct.isSetPos()) {
                {
                    oprot.writeI32(struct.pos.size());
                    for (PosNerChunk _iter25 : struct.pos) {
                        _iter25.write(oprot);
                    }
                }
            }
            if (struct.isSetNer()) {
                {
                    oprot.writeI32(struct.ner.size());
                    for (PosNerChunk _iter26 : struct.ner) {
                        _iter26.write(oprot);
                    }
                }
            }
            if (struct.isSetChunk()) {
                {
                    oprot.writeI32(struct.chunk.size());
                    for (PosNerChunk _iter27 : struct.chunk) {
                        _iter27.write(oprot);
                    }
                }
            }
            if (struct.isSetVerbs()) {
                {
                    oprot.writeI32(struct.verbs.size());
                    for (String _iter28 : struct.verbs) {
                        oprot.writeString(_iter28);
                    }
                }
            }
            if (struct.isSetSrl()) {
                {
                    oprot.writeI32(struct.srl.size());
                    for (Srl _iter29 : struct.srl) {
                        _iter29.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, NlpPayload struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.words = new java.util.ArrayList<String>(_list30.size);
                    String _elem31;
                    for (int _i32 = 0; _i32 < _list30.size; ++_i32) {
                        _elem31 = iprot.readString();
                        struct.words.add(_elem31);
                    }
                }
                struct.setWordsIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.pos = new java.util.ArrayList<PosNerChunk>(_list33.size);
                    PosNerChunk _elem34;
                    for (int _i35 = 0; _i35 < _list33.size; ++_i35) {
                        _elem34 = new PosNerChunk();
                        _elem34.read(iprot);
                        struct.pos.add(_elem34);
                    }
                }
                struct.setPosIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.ner = new java.util.ArrayList<PosNerChunk>(_list36.size);
                    PosNerChunk _elem37;
                    for (int _i38 = 0; _i38 < _list36.size; ++_i38) {
                        _elem37 = new PosNerChunk();
                        _elem37.read(iprot);
                        struct.ner.add(_elem37);
                    }
                }
                struct.setNerIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.chunk = new java.util.ArrayList<PosNerChunk>(_list39.size);
                    PosNerChunk _elem40;
                    for (int _i41 = 0; _i41 < _list39.size; ++_i41) {
                        _elem40 = new PosNerChunk();
                        _elem40.read(iprot);
                        struct.chunk.add(_elem40);
                    }
                }
                struct.setChunkIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.verbs = new java.util.ArrayList<String>(_list42.size);
                    String _elem43;
                    for (int _i44 = 0; _i44 < _list42.size; ++_i44) {
                        _elem43 = iprot.readString();
                        struct.verbs.add(_elem43);
                    }
                }
                struct.setVerbsIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.srl = new java.util.ArrayList<Srl>(_list45.size);
                    Srl _elem46;
                    for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
                        _elem46 = new Srl();
                        _elem46.read(iprot);
                        struct.srl.add(_elem46);
                    }
                }
                struct.setSrlIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

