/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.word2vector;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-23")
public class w2vPayload implements org.apache.thrift.TBase<w2vPayload, w2vPayload._Fields>, java.io.Serializable, Cloneable, Comparable<w2vPayload> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("w2vPayload");

    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField TOPN_FIELD_DESC = new org.apache.thrift.protocol.TField("topn", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new w2vPayloadStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new w2vPayloadTupleSchemeFactory();

    public java.util.List<String> words; // required
    public int topn; // required
    public String language; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        WORDS((short) 1, "words"),
        TOPN((short) 2, "topn"),
        LANGUAGE((short) 3, "language");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // WORDS
                    return WORDS;
                case 2: // TOPN
                    return TOPN;
                case 3: // LANGUAGE
                    return LANGUAGE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TOPN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.TOPN, new org.apache.thrift.meta_data.FieldMetaData("topn", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(w2vPayload.class, metaDataMap);
    }

    public w2vPayload() {
    }

    public w2vPayload(
            java.util.List<String> words,
            int topn,
            String language) {
        this();
        this.words = words;
        this.topn = topn;
        setTopnIsSet(true);
        this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public w2vPayload(w2vPayload other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetWords()) {
            java.util.List<String> __this__words = new java.util.ArrayList<String>(other.words);
            this.words = __this__words;
        }
        this.topn = other.topn;
        if (other.isSetLanguage()) {
            this.language = other.language;
        }
    }

    public w2vPayload deepCopy() {
        return new w2vPayload(this);
    }

    @Override
    public void clear() {
        this.words = null;
        setTopnIsSet(false);
        this.topn = 0;
        this.language = null;
    }

    public int getWordsSize() {
        return (this.words == null) ? 0 : this.words.size();
    }

    public java.util.Iterator<String> getWordsIterator() {
        return (this.words == null) ? null : this.words.iterator();
    }

    public void addToWords(String elem) {
        if (this.words == null) {
            this.words = new java.util.ArrayList<String>();
        }
        this.words.add(elem);
    }

    public java.util.List<String> getWords() {
        return this.words;
    }

    public w2vPayload setWords(java.util.List<String> words) {
        this.words = words;
        return this;
    }

    public void unsetWords() {
        this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
        return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
        if (!value) {
            this.words = null;
        }
    }

    public int getTopn() {
        return this.topn;
    }

    public w2vPayload setTopn(int topn) {
        this.topn = topn;
        setTopnIsSet(true);
        return this;
    }

    public void unsetTopn() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    /** Returns true if field topn is set (has been assigned a value) and false otherwise */
    public boolean isSetTopn() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    public void setTopnIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPN_ISSET_ID, value);
    }

    public String getLanguage() {
        return this.language;
    }

    public w2vPayload setLanguage(String language) {
        this.language = language;
        return this;
    }

    public void unsetLanguage() {
        this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
        return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
        if (!value) {
            this.language = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case WORDS:
                if (value == null) {
                    unsetWords();
                } else {
                    setWords((java.util.List<String>) value);
                }
                break;

            case TOPN:
                if (value == null) {
                    unsetTopn();
                } else {
                    setTopn((Integer) value);
                }
                break;

            case LANGUAGE:
                if (value == null) {
                    unsetLanguage();
                } else {
                    setLanguage((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case WORDS:
                return getWords();

            case TOPN:
                return getTopn();

            case LANGUAGE:
                return getLanguage();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case WORDS:
                return isSetWords();
            case TOPN:
                return isSetTopn();
            case LANGUAGE:
                return isSetLanguage();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof w2vPayload)
            return this.equals((w2vPayload) that);
        return false;
    }

    public boolean equals(w2vPayload that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_words = true && this.isSetWords();
        boolean that_present_words = true && that.isSetWords();
        if (this_present_words || that_present_words) {
            if (!(this_present_words && that_present_words))
                return false;
            if (!this.words.equals(that.words))
                return false;
        }

        boolean this_present_topn = true;
        boolean that_present_topn = true;
        if (this_present_topn || that_present_topn) {
            if (!(this_present_topn && that_present_topn))
                return false;
            if (this.topn != that.topn)
                return false;
        }

        boolean this_present_language = true && this.isSetLanguage();
        boolean that_present_language = true && that.isSetLanguage();
        if (this_present_language || that_present_language) {
            if (!(this_present_language && that_present_language))
                return false;
            if (!this.language.equals(that.language))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetWords()) ? 131071 : 524287);
        if (isSetWords())
            hashCode = hashCode * 8191 + words.hashCode();

        hashCode = hashCode * 8191 + topn;

        hashCode = hashCode * 8191 + ((isSetLanguage()) ? 131071 : 524287);
        if (isSetLanguage())
            hashCode = hashCode * 8191 + language.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(w2vPayload other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWords()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTopn()).compareTo(other.isSetTopn());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTopn()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topn, other.topn);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLanguage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("w2vPayload(");
        boolean first = true;

        sb.append("words:");
        if (this.words == null) {
            sb.append("null");
        } else {
            sb.append(this.words);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("topn:");
        sb.append(this.topn);
        first = false;
        if (!first) sb.append(", ");
        sb.append("language:");
        if (this.language == null) {
            sb.append("null");
        } else {
            sb.append(this.language);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class w2vPayloadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public w2vPayloadStandardScheme getScheme() {
            return new w2vPayloadStandardScheme();
        }
    }

    private static class w2vPayloadStandardScheme extends org.apache.thrift.scheme.StandardScheme<w2vPayload> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, w2vPayload struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // WORDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.words = new java.util.ArrayList<String>(_list0.size);
                                String _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readString();
                                    struct.words.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setWordsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TOPN
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.topn = iprot.readI32();
                            struct.setTopnIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // LANGUAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.language = iprot.readString();
                            struct.setLanguageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, w2vPayload struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.words != null) {
                oprot.writeFieldBegin(WORDS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
                    for (String _iter3 : struct.words) {
                        oprot.writeString(_iter3);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TOPN_FIELD_DESC);
            oprot.writeI32(struct.topn);
            oprot.writeFieldEnd();
            if (struct.language != null) {
                oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
                oprot.writeString(struct.language);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class w2vPayloadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public w2vPayloadTupleScheme getScheme() {
            return new w2vPayloadTupleScheme();
        }
    }

    private static class w2vPayloadTupleScheme extends org.apache.thrift.scheme.TupleScheme<w2vPayload> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, w2vPayload struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetWords()) {
                optionals.set(0);
            }
            if (struct.isSetTopn()) {
                optionals.set(1);
            }
            if (struct.isSetLanguage()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetWords()) {
                {
                    oprot.writeI32(struct.words.size());
                    for (String _iter4 : struct.words) {
                        oprot.writeString(_iter4);
                    }
                }
            }
            if (struct.isSetTopn()) {
                oprot.writeI32(struct.topn);
            }
            if (struct.isSetLanguage()) {
                oprot.writeString(struct.language);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, w2vPayload struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.words = new java.util.ArrayList<String>(_list5.size);
                    String _elem6;
                    for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                        _elem6 = iprot.readString();
                        struct.words.add(_elem6);
                    }
                }
                struct.setWordsIsSet(true);
            }
            if (incoming.get(1)) {
                struct.topn = iprot.readI32();
                struct.setTopnIsSet(true);
            }
            if (incoming.get(2)) {
                struct.language = iprot.readString();
                struct.setLanguageIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

