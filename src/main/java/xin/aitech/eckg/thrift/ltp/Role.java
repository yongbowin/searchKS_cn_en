/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.ltp;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Role implements org.apache.thrift.TBase<Role, Role._Fields>, java.io.Serializable, Cloneable, Comparable<Role> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Role");

    private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField END_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("endIndex", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new RoleStandardSchemeFactory());
        schemes.put(TupleScheme.class, new RoleTupleSchemeFactory());
    }

    public String role; // required
    public int startIndex; // required
    public int endIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ROLE((short) 1, "role"),
        START_INDEX((short) 2, "startIndex"),
        END_INDEX((short) 3, "endIndex");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ROLE
                    return ROLE;
                case 2: // START_INDEX
                    return START_INDEX;
                case 3: // END_INDEX
                    return END_INDEX;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __STARTINDEX_ISSET_ID = 0;
    private static final int __ENDINDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.END_INDEX, new org.apache.thrift.meta_data.FieldMetaData("endIndex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Role.class, metaDataMap);
    }

    public Role() {
    }

    public Role(
            String role,
            int startIndex,
            int endIndex) {
        this();
        this.role = role;
        this.startIndex = startIndex;
        setStartIndexIsSet(true);
        this.endIndex = endIndex;
        setEndIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Role(Role other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetRole()) {
            this.role = other.role;
        }
        this.startIndex = other.startIndex;
        this.endIndex = other.endIndex;
    }

    public Role deepCopy() {
        return new Role(this);
    }

    @Override
    public void clear() {
        this.role = null;
        setStartIndexIsSet(false);
        this.startIndex = 0;
        setEndIndexIsSet(false);
        this.endIndex = 0;
    }

    public String getRole() {
        return this.role;
    }

    public Role setRole(String role) {
        this.role = role;
        return this;
    }

    public void unsetRole() {
        this.role = null;
    }

    /** Returns true if field role is set (has been assigned a value) and false otherwise */
    public boolean isSetRole() {
        return this.role != null;
    }

    public void setRoleIsSet(boolean value) {
        if (!value) {
            this.role = null;
        }
    }

    public int getStartIndex() {
        return this.startIndex;
    }

    public Role setStartIndex(int startIndex) {
        this.startIndex = startIndex;
        setStartIndexIsSet(true);
        return this;
    }

    public void unsetStartIndex() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
        return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getEndIndex() {
        return this.endIndex;
    }

    public Role setEndIndex(int endIndex) {
        this.endIndex = endIndex;
        setEndIndexIsSet(true);
        return this;
    }

    public void unsetEndIndex() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDINDEX_ISSET_ID);
    }

    /** Returns true if field endIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetEndIndex() {
        return EncodingUtils.testBit(__isset_bitfield, __ENDINDEX_ISSET_ID);
    }

    public void setEndIndexIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ROLE:
                if (value == null) {
                    unsetRole();
                } else {
                    setRole((String) value);
                }
                break;

            case START_INDEX:
                if (value == null) {
                    unsetStartIndex();
                } else {
                    setStartIndex((Integer) value);
                }
                break;

            case END_INDEX:
                if (value == null) {
                    unsetEndIndex();
                } else {
                    setEndIndex((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ROLE:
                return getRole();

            case START_INDEX:
                return Integer.valueOf(getStartIndex());

            case END_INDEX:
                return Integer.valueOf(getEndIndex());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ROLE:
                return isSetRole();
            case START_INDEX:
                return isSetStartIndex();
            case END_INDEX:
                return isSetEndIndex();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Role)
            return this.equals((Role) that);
        return false;
    }

    public boolean equals(Role that) {
        if (that == null)
            return false;

        boolean this_present_role = true && this.isSetRole();
        boolean that_present_role = true && that.isSetRole();
        if (this_present_role || that_present_role) {
            if (!(this_present_role && that_present_role))
                return false;
            if (!this.role.equals(that.role))
                return false;
        }

        boolean this_present_startIndex = true;
        boolean that_present_startIndex = true;
        if (this_present_startIndex || that_present_startIndex) {
            if (!(this_present_startIndex && that_present_startIndex))
                return false;
            if (this.startIndex != that.startIndex)
                return false;
        }

        boolean this_present_endIndex = true;
        boolean that_present_endIndex = true;
        if (this_present_endIndex || that_present_endIndex) {
            if (!(this_present_endIndex && that_present_endIndex))
                return false;
            if (this.endIndex != that.endIndex)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(Role other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRole()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStartIndex()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEndIndex()).compareTo(other.isSetEndIndex());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEndIndex()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIndex, other.endIndex);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Role(");
        boolean first = true;

        sb.append("role:");
        if (this.role == null) {
            sb.append("null");
        } else {
            sb.append(this.role);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("startIndex:");
        sb.append(this.startIndex);
        first = false;
        if (!first) sb.append(", ");
        sb.append("endIndex:");
        sb.append(this.endIndex);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class RoleStandardSchemeFactory implements SchemeFactory {
        public RoleStandardScheme getScheme() {
            return new RoleStandardScheme();
        }
    }

    private static class RoleStandardScheme extends StandardScheme<Role> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Role struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ROLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.role = iprot.readString();
                            struct.setRoleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // START_INDEX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.startIndex = iprot.readI32();
                            struct.setStartIndexIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // END_INDEX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.endIndex = iprot.readI32();
                            struct.setEndIndexIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Role struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.role != null) {
                oprot.writeFieldBegin(ROLE_FIELD_DESC);
                oprot.writeString(struct.role);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
            oprot.writeI32(struct.startIndex);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(END_INDEX_FIELD_DESC);
            oprot.writeI32(struct.endIndex);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class RoleTupleSchemeFactory implements SchemeFactory {
        public RoleTupleScheme getScheme() {
            return new RoleTupleScheme();
        }
    }

    private static class RoleTupleScheme extends TupleScheme<Role> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Role struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetRole()) {
                optionals.set(0);
            }
            if (struct.isSetStartIndex()) {
                optionals.set(1);
            }
            if (struct.isSetEndIndex()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetRole()) {
                oprot.writeString(struct.role);
            }
            if (struct.isSetStartIndex()) {
                oprot.writeI32(struct.startIndex);
            }
            if (struct.isSetEndIndex()) {
                oprot.writeI32(struct.endIndex);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Role struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.role = iprot.readString();
                struct.setRoleIsSet(true);
            }
            if (incoming.get(1)) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
            }
            if (incoming.get(2)) {
                struct.endIndex = iprot.readI32();
                struct.setEndIndexIsSet(true);
            }
        }
    }

}

