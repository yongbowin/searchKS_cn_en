/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.ltp;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Srl implements org.apache.thrift.TBase<Srl, Srl._Fields>, java.io.Serializable, Cloneable, Comparable<Srl> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Srl");

    private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("roles", org.apache.thrift.protocol.TType.LIST, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new SrlStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SrlTupleSchemeFactory());
    }

    public int pos; // required
    public List<Role> roles; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        POS((short) 1, "pos"),
        ROLES((short) 2, "roles");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // POS
                    return POS;
                case 2: // ROLES
                    return ROLES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __POS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Role.class))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Srl.class, metaDataMap);
    }

    public Srl() {
    }

    public Srl(
            int pos,
            List<Role> roles) {
        this();
        this.pos = pos;
        setPosIsSet(true);
        this.roles = roles;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Srl(Srl other) {
        __isset_bitfield = other.__isset_bitfield;
        this.pos = other.pos;
        if (other.isSetRoles()) {
            List<Role> __this__roles = new ArrayList<Role>(other.roles.size());
            for (Role other_element : other.roles) {
                __this__roles.add(new Role(other_element));
            }
            this.roles = __this__roles;
        }
    }

    public Srl deepCopy() {
        return new Srl(this);
    }

    @Override
    public void clear() {
        setPosIsSet(false);
        this.pos = 0;
        this.roles = null;
    }

    public int getPos() {
        return this.pos;
    }

    public Srl setPos(int pos) {
        this.pos = pos;
        setPosIsSet(true);
        return this;
    }

    public void unsetPos() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
    }

    /** Returns true if field pos is set (has been assigned a value) and false otherwise */
    public boolean isSetPos() {
        return EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
    }

    public void setPosIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
    }

    public int getRolesSize() {
        return (this.roles == null) ? 0 : this.roles.size();
    }

    public java.util.Iterator<Role> getRolesIterator() {
        return (this.roles == null) ? null : this.roles.iterator();
    }

    public void addToRoles(Role elem) {
        if (this.roles == null) {
            this.roles = new ArrayList<Role>();
        }
        this.roles.add(elem);
    }

    public List<Role> getRoles() {
        return this.roles;
    }

    public Srl setRoles(List<Role> roles) {
        this.roles = roles;
        return this;
    }

    public void unsetRoles() {
        this.roles = null;
    }

    /** Returns true if field roles is set (has been assigned a value) and false otherwise */
    public boolean isSetRoles() {
        return this.roles != null;
    }

    public void setRolesIsSet(boolean value) {
        if (!value) {
            this.roles = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case POS:
                if (value == null) {
                    unsetPos();
                } else {
                    setPos((Integer) value);
                }
                break;

            case ROLES:
                if (value == null) {
                    unsetRoles();
                } else {
                    setRoles((List<Role>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case POS:
                return Integer.valueOf(getPos());

            case ROLES:
                return getRoles();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case POS:
                return isSetPos();
            case ROLES:
                return isSetRoles();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Srl)
            return this.equals((Srl) that);
        return false;
    }

    public boolean equals(Srl that) {
        if (that == null)
            return false;

        boolean this_present_pos = true;
        boolean that_present_pos = true;
        if (this_present_pos || that_present_pos) {
            if (!(this_present_pos && that_present_pos))
                return false;
            if (this.pos != that.pos)
                return false;
        }

        boolean this_present_roles = true && this.isSetRoles();
        boolean that_present_roles = true && that.isSetRoles();
        if (this_present_roles || that_present_roles) {
            if (!(this_present_roles && that_present_roles))
                return false;
            if (!this.roles.equals(that.roles))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(Srl other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetPos()).compareTo(other.isSetPos());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPos()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, other.pos);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRoles()).compareTo(other.isSetRoles());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRoles()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Srl(");
        boolean first = true;

        sb.append("pos:");
        sb.append(this.pos);
        first = false;
        if (!first) sb.append(", ");
        sb.append("roles:");
        if (this.roles == null) {
            sb.append("null");
        } else {
            sb.append(this.roles);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SrlStandardSchemeFactory implements SchemeFactory {
        public SrlStandardScheme getScheme() {
            return new SrlStandardScheme();
        }
    }

    private static class SrlStandardScheme extends StandardScheme<Srl> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Srl struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // POS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.pos = iprot.readI32();
                            struct.setPosIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // ROLES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.roles = new ArrayList<Role>(_list0.size);
                                for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                                    Role _elem2;
                                    _elem2 = new Role();
                                    _elem2.read(iprot);
                                    struct.roles.add(_elem2);
                                }
                                iprot.readListEnd();
                            }
                            struct.setRolesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Srl struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(POS_FIELD_DESC);
            oprot.writeI32(struct.pos);
            oprot.writeFieldEnd();
            if (struct.roles != null) {
                oprot.writeFieldBegin(ROLES_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.roles.size()));
                    for (Role _iter3 : struct.roles) {
                        _iter3.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SrlTupleSchemeFactory implements SchemeFactory {
        public SrlTupleScheme getScheme() {
            return new SrlTupleScheme();
        }
    }

    private static class SrlTupleScheme extends TupleScheme<Srl> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Srl struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetPos()) {
                optionals.set(0);
            }
            if (struct.isSetRoles()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetPos()) {
                oprot.writeI32(struct.pos);
            }
            if (struct.isSetRoles()) {
                {
                    oprot.writeI32(struct.roles.size());
                    for (Role _iter4 : struct.roles) {
                        _iter4.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Srl struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.pos = iprot.readI32();
                struct.setPosIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.roles = new ArrayList<Role>(_list5.size);
                    for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
                        Role _elem7;
                        _elem7 = new Role();
                        _elem7.read(iprot);
                        struct.roles.add(_elem7);
                    }
                }
                struct.setRolesIsSet(true);
            }
        }
    }

}

