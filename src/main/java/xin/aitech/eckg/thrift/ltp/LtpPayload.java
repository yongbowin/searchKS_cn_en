/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package xin.aitech.eckg.thrift.ltp;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class LtpPayload implements org.apache.thrift.TBase<LtpPayload, LtpPayload._Fields>, java.io.Serializable, Cloneable, Comparable<LtpPayload> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LtpPayload");

    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField POSTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("postags", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField NERS_FIELD_DESC = new org.apache.thrift.protocol.TField("ners", org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField HEADS_FIELD_DESC = new org.apache.thrift.protocol.TField("heads", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField DEPRELS_FIELD_DESC = new org.apache.thrift.protocol.TField("deprels", org.apache.thrift.protocol.TType.LIST, (short) 5);
    private static final org.apache.thrift.protocol.TField SRLS_FIELD_DESC = new org.apache.thrift.protocol.TField("srls", org.apache.thrift.protocol.TType.LIST, (short) 6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new LtpPayloadStandardSchemeFactory());
        schemes.put(TupleScheme.class, new LtpPayloadTupleSchemeFactory());
    }

    public List<String> words; // required
    public List<String> postags; // required
    public List<String> ners; // required
    public List<Integer> heads; // required
    public List<String> deprels; // required
    public List<Srl> srls; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        WORDS((short) 1, "words"),
        POSTAGS((short) 2, "postags"),
        NERS((short) 3, "ners"),
        HEADS((short) 4, "heads"),
        DEPRELS((short) 5, "deprels"),
        SRLS((short) 6, "srls");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // WORDS
                    return WORDS;
                case 2: // POSTAGS
                    return POSTAGS;
                case 3: // NERS
                    return NERS;
                case 4: // HEADS
                    return HEADS;
                case 5: // DEPRELS
                    return DEPRELS;
                case 6: // SRLS
                    return SRLS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.POSTAGS, new org.apache.thrift.meta_data.FieldMetaData("postags", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.NERS, new org.apache.thrift.meta_data.FieldMetaData("ners", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.HEADS, new org.apache.thrift.meta_data.FieldMetaData("heads", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        tmpMap.put(_Fields.DEPRELS, new org.apache.thrift.meta_data.FieldMetaData("deprels", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.SRLS, new org.apache.thrift.meta_data.FieldMetaData("srls", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Srl.class))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LtpPayload.class, metaDataMap);
    }

    public LtpPayload() {
    }

    public LtpPayload(
            List<String> words,
            List<String> postags,
            List<String> ners,
            List<Integer> heads,
            List<String> deprels,
            List<Srl> srls) {
        this();
        this.words = words;
        this.postags = postags;
        this.ners = ners;
        this.heads = heads;
        this.deprels = deprels;
        this.srls = srls;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LtpPayload(LtpPayload other) {
        if (other.isSetWords()) {
            List<String> __this__words = new ArrayList<String>(other.words);
            this.words = __this__words;
        }
        if (other.isSetPostags()) {
            List<String> __this__postags = new ArrayList<String>(other.postags);
            this.postags = __this__postags;
        }
        if (other.isSetNers()) {
            List<String> __this__ners = new ArrayList<String>(other.ners);
            this.ners = __this__ners;
        }
        if (other.isSetHeads()) {
            List<Integer> __this__heads = new ArrayList<Integer>(other.heads);
            this.heads = __this__heads;
        }
        if (other.isSetDeprels()) {
            List<String> __this__deprels = new ArrayList<String>(other.deprels);
            this.deprels = __this__deprels;
        }
        if (other.isSetSrls()) {
            List<Srl> __this__srls = new ArrayList<Srl>(other.srls.size());
            for (Srl other_element : other.srls) {
                __this__srls.add(new Srl(other_element));
            }
            this.srls = __this__srls;
        }
    }

    public LtpPayload deepCopy() {
        return new LtpPayload(this);
    }

    @Override
    public void clear() {
        this.words = null;
        this.postags = null;
        this.ners = null;
        this.heads = null;
        this.deprels = null;
        this.srls = null;
    }

    public int getWordsSize() {
        return (this.words == null) ? 0 : this.words.size();
    }

    public java.util.Iterator<String> getWordsIterator() {
        return (this.words == null) ? null : this.words.iterator();
    }

    public void addToWords(String elem) {
        if (this.words == null) {
            this.words = new ArrayList<String>();
        }
        this.words.add(elem);
    }

    public List<String> getWords() {
        return this.words;
    }

    public LtpPayload setWords(List<String> words) {
        this.words = words;
        return this;
    }

    public void unsetWords() {
        this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
        return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
        if (!value) {
            this.words = null;
        }
    }

    public int getPostagsSize() {
        return (this.postags == null) ? 0 : this.postags.size();
    }

    public java.util.Iterator<String> getPostagsIterator() {
        return (this.postags == null) ? null : this.postags.iterator();
    }

    public void addToPostags(String elem) {
        if (this.postags == null) {
            this.postags = new ArrayList<String>();
        }
        this.postags.add(elem);
    }

    public List<String> getPostags() {
        return this.postags;
    }

    public LtpPayload setPostags(List<String> postags) {
        this.postags = postags;
        return this;
    }

    public void unsetPostags() {
        this.postags = null;
    }

    /** Returns true if field postags is set (has been assigned a value) and false otherwise */
    public boolean isSetPostags() {
        return this.postags != null;
    }

    public void setPostagsIsSet(boolean value) {
        if (!value) {
            this.postags = null;
        }
    }

    public int getNersSize() {
        return (this.ners == null) ? 0 : this.ners.size();
    }

    public java.util.Iterator<String> getNersIterator() {
        return (this.ners == null) ? null : this.ners.iterator();
    }

    public void addToNers(String elem) {
        if (this.ners == null) {
            this.ners = new ArrayList<String>();
        }
        this.ners.add(elem);
    }

    public List<String> getNers() {
        return this.ners;
    }

    public LtpPayload setNers(List<String> ners) {
        this.ners = ners;
        return this;
    }

    public void unsetNers() {
        this.ners = null;
    }

    /** Returns true if field ners is set (has been assigned a value) and false otherwise */
    public boolean isSetNers() {
        return this.ners != null;
    }

    public void setNersIsSet(boolean value) {
        if (!value) {
            this.ners = null;
        }
    }

    public int getHeadsSize() {
        return (this.heads == null) ? 0 : this.heads.size();
    }

    public java.util.Iterator<Integer> getHeadsIterator() {
        return (this.heads == null) ? null : this.heads.iterator();
    }

    public void addToHeads(int elem) {
        if (this.heads == null) {
            this.heads = new ArrayList<Integer>();
        }
        this.heads.add(elem);
    }

    public List<Integer> getHeads() {
        return this.heads;
    }

    public LtpPayload setHeads(List<Integer> heads) {
        this.heads = heads;
        return this;
    }

    public void unsetHeads() {
        this.heads = null;
    }

    /** Returns true if field heads is set (has been assigned a value) and false otherwise */
    public boolean isSetHeads() {
        return this.heads != null;
    }

    public void setHeadsIsSet(boolean value) {
        if (!value) {
            this.heads = null;
        }
    }

    public int getDeprelsSize() {
        return (this.deprels == null) ? 0 : this.deprels.size();
    }

    public java.util.Iterator<String> getDeprelsIterator() {
        return (this.deprels == null) ? null : this.deprels.iterator();
    }

    public void addToDeprels(String elem) {
        if (this.deprels == null) {
            this.deprels = new ArrayList<String>();
        }
        this.deprels.add(elem);
    }

    public List<String> getDeprels() {
        return this.deprels;
    }

    public LtpPayload setDeprels(List<String> deprels) {
        this.deprels = deprels;
        return this;
    }

    public void unsetDeprels() {
        this.deprels = null;
    }

    /** Returns true if field deprels is set (has been assigned a value) and false otherwise */
    public boolean isSetDeprels() {
        return this.deprels != null;
    }

    public void setDeprelsIsSet(boolean value) {
        if (!value) {
            this.deprels = null;
        }
    }

    public int getSrlsSize() {
        return (this.srls == null) ? 0 : this.srls.size();
    }

    public java.util.Iterator<Srl> getSrlsIterator() {
        return (this.srls == null) ? null : this.srls.iterator();
    }

    public void addToSrls(Srl elem) {
        if (this.srls == null) {
            this.srls = new ArrayList<Srl>();
        }
        this.srls.add(elem);
    }

    public List<Srl> getSrls() {
        return this.srls;
    }

    public LtpPayload setSrls(List<Srl> srls) {
        this.srls = srls;
        return this;
    }

    public void unsetSrls() {
        this.srls = null;
    }

    /** Returns true if field srls is set (has been assigned a value) and false otherwise */
    public boolean isSetSrls() {
        return this.srls != null;
    }

    public void setSrlsIsSet(boolean value) {
        if (!value) {
            this.srls = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case WORDS:
                if (value == null) {
                    unsetWords();
                } else {
                    setWords((List<String>) value);
                }
                break;

            case POSTAGS:
                if (value == null) {
                    unsetPostags();
                } else {
                    setPostags((List<String>) value);
                }
                break;

            case NERS:
                if (value == null) {
                    unsetNers();
                } else {
                    setNers((List<String>) value);
                }
                break;

            case HEADS:
                if (value == null) {
                    unsetHeads();
                } else {
                    setHeads((List<Integer>) value);
                }
                break;

            case DEPRELS:
                if (value == null) {
                    unsetDeprels();
                } else {
                    setDeprels((List<String>) value);
                }
                break;

            case SRLS:
                if (value == null) {
                    unsetSrls();
                } else {
                    setSrls((List<Srl>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case WORDS:
                return getWords();

            case POSTAGS:
                return getPostags();

            case NERS:
                return getNers();

            case HEADS:
                return getHeads();

            case DEPRELS:
                return getDeprels();

            case SRLS:
                return getSrls();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case WORDS:
                return isSetWords();
            case POSTAGS:
                return isSetPostags();
            case NERS:
                return isSetNers();
            case HEADS:
                return isSetHeads();
            case DEPRELS:
                return isSetDeprels();
            case SRLS:
                return isSetSrls();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof LtpPayload)
            return this.equals((LtpPayload) that);
        return false;
    }

    public boolean equals(LtpPayload that) {
        if (that == null)
            return false;

        boolean this_present_words = true && this.isSetWords();
        boolean that_present_words = true && that.isSetWords();
        if (this_present_words || that_present_words) {
            if (!(this_present_words && that_present_words))
                return false;
            if (!this.words.equals(that.words))
                return false;
        }

        boolean this_present_postags = true && this.isSetPostags();
        boolean that_present_postags = true && that.isSetPostags();
        if (this_present_postags || that_present_postags) {
            if (!(this_present_postags && that_present_postags))
                return false;
            if (!this.postags.equals(that.postags))
                return false;
        }

        boolean this_present_ners = true && this.isSetNers();
        boolean that_present_ners = true && that.isSetNers();
        if (this_present_ners || that_present_ners) {
            if (!(this_present_ners && that_present_ners))
                return false;
            if (!this.ners.equals(that.ners))
                return false;
        }

        boolean this_present_heads = true && this.isSetHeads();
        boolean that_present_heads = true && that.isSetHeads();
        if (this_present_heads || that_present_heads) {
            if (!(this_present_heads && that_present_heads))
                return false;
            if (!this.heads.equals(that.heads))
                return false;
        }

        boolean this_present_deprels = true && this.isSetDeprels();
        boolean that_present_deprels = true && that.isSetDeprels();
        if (this_present_deprels || that_present_deprels) {
            if (!(this_present_deprels && that_present_deprels))
                return false;
            if (!this.deprels.equals(that.deprels))
                return false;
        }

        boolean this_present_srls = true && this.isSetSrls();
        boolean that_present_srls = true && that.isSetSrls();
        if (this_present_srls || that_present_srls) {
            if (!(this_present_srls && that_present_srls))
                return false;
            if (!this.srls.equals(that.srls))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(LtpPayload other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWords()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPostags()).compareTo(other.isSetPostags());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPostags()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postags, other.postags);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNers()).compareTo(other.isSetNers());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNers()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ners, other.ners);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHeads()).compareTo(other.isSetHeads());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHeads()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heads, other.heads);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDeprels()).compareTo(other.isSetDeprels());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDeprels()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprels, other.deprels);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSrls()).compareTo(other.isSetSrls());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSrls()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srls, other.srls);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("LtpPayload(");
        boolean first = true;

        sb.append("words:");
        if (this.words == null) {
            sb.append("null");
        } else {
            sb.append(this.words);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("postags:");
        if (this.postags == null) {
            sb.append("null");
        } else {
            sb.append(this.postags);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("ners:");
        if (this.ners == null) {
            sb.append("null");
        } else {
            sb.append(this.ners);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("heads:");
        if (this.heads == null) {
            sb.append("null");
        } else {
            sb.append(this.heads);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("deprels:");
        if (this.deprels == null) {
            sb.append("null");
        } else {
            sb.append(this.deprels);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("srls:");
        if (this.srls == null) {
            sb.append("null");
        } else {
            sb.append(this.srls);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class LtpPayloadStandardSchemeFactory implements SchemeFactory {
        public LtpPayloadStandardScheme getScheme() {
            return new LtpPayloadStandardScheme();
        }
    }

    private static class LtpPayloadStandardScheme extends StandardScheme<LtpPayload> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, LtpPayload struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // WORDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                struct.words = new ArrayList<String>(_list8.size);
                                for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                                    String _elem10;
                                    _elem10 = iprot.readString();
                                    struct.words.add(_elem10);
                                }
                                iprot.readListEnd();
                            }
                            struct.setWordsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // POSTAGS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                                struct.postags = new ArrayList<String>(_list11.size);
                                for (int _i12 = 0; _i12 < _list11.size; ++_i12) {
                                    String _elem13;
                                    _elem13 = iprot.readString();
                                    struct.postags.add(_elem13);
                                }
                                iprot.readListEnd();
                            }
                            struct.setPostagsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NERS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                                struct.ners = new ArrayList<String>(_list14.size);
                                for (int _i15 = 0; _i15 < _list14.size; ++_i15) {
                                    String _elem16;
                                    _elem16 = iprot.readString();
                                    struct.ners.add(_elem16);
                                }
                                iprot.readListEnd();
                            }
                            struct.setNersIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // HEADS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                                struct.heads = new ArrayList<Integer>(_list17.size);
                                for (int _i18 = 0; _i18 < _list17.size; ++_i18) {
                                    int _elem19;
                                    _elem19 = iprot.readI32();
                                    struct.heads.add(_elem19);
                                }
                                iprot.readListEnd();
                            }
                            struct.setHeadsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DEPRELS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                                struct.deprels = new ArrayList<String>(_list20.size);
                                for (int _i21 = 0; _i21 < _list20.size; ++_i21) {
                                    String _elem22;
                                    _elem22 = iprot.readString();
                                    struct.deprels.add(_elem22);
                                }
                                iprot.readListEnd();
                            }
                            struct.setDeprelsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // SRLS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                                struct.srls = new ArrayList<Srl>(_list23.size);
                                for (int _i24 = 0; _i24 < _list23.size; ++_i24) {
                                    Srl _elem25;
                                    _elem25 = new Srl();
                                    _elem25.read(iprot);
                                    struct.srls.add(_elem25);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSrlsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, LtpPayload struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.words != null) {
                oprot.writeFieldBegin(WORDS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
                    for (String _iter26 : struct.words) {
                        oprot.writeString(_iter26);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.postags != null) {
                oprot.writeFieldBegin(POSTAGS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.postags.size()));
                    for (String _iter27 : struct.postags) {
                        oprot.writeString(_iter27);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.ners != null) {
                oprot.writeFieldBegin(NERS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ners.size()));
                    for (String _iter28 : struct.ners) {
                        oprot.writeString(_iter28);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.heads != null) {
                oprot.writeFieldBegin(HEADS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.heads.size()));
                    for (int _iter29 : struct.heads) {
                        oprot.writeI32(_iter29);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.deprels != null) {
                oprot.writeFieldBegin(DEPRELS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.deprels.size()));
                    for (String _iter30 : struct.deprels) {
                        oprot.writeString(_iter30);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.srls != null) {
                oprot.writeFieldBegin(SRLS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.srls.size()));
                    for (Srl _iter31 : struct.srls) {
                        _iter31.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class LtpPayloadTupleSchemeFactory implements SchemeFactory {
        public LtpPayloadTupleScheme getScheme() {
            return new LtpPayloadTupleScheme();
        }
    }

    private static class LtpPayloadTupleScheme extends TupleScheme<LtpPayload> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, LtpPayload struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetWords()) {
                optionals.set(0);
            }
            if (struct.isSetPostags()) {
                optionals.set(1);
            }
            if (struct.isSetNers()) {
                optionals.set(2);
            }
            if (struct.isSetHeads()) {
                optionals.set(3);
            }
            if (struct.isSetDeprels()) {
                optionals.set(4);
            }
            if (struct.isSetSrls()) {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetWords()) {
                {
                    oprot.writeI32(struct.words.size());
                    for (String _iter32 : struct.words) {
                        oprot.writeString(_iter32);
                    }
                }
            }
            if (struct.isSetPostags()) {
                {
                    oprot.writeI32(struct.postags.size());
                    for (String _iter33 : struct.postags) {
                        oprot.writeString(_iter33);
                    }
                }
            }
            if (struct.isSetNers()) {
                {
                    oprot.writeI32(struct.ners.size());
                    for (String _iter34 : struct.ners) {
                        oprot.writeString(_iter34);
                    }
                }
            }
            if (struct.isSetHeads()) {
                {
                    oprot.writeI32(struct.heads.size());
                    for (int _iter35 : struct.heads) {
                        oprot.writeI32(_iter35);
                    }
                }
            }
            if (struct.isSetDeprels()) {
                {
                    oprot.writeI32(struct.deprels.size());
                    for (String _iter36 : struct.deprels) {
                        oprot.writeString(_iter36);
                    }
                }
            }
            if (struct.isSetSrls()) {
                {
                    oprot.writeI32(struct.srls.size());
                    for (Srl _iter37 : struct.srls) {
                        _iter37.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, LtpPayload struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.words = new ArrayList<String>(_list38.size);
                    for (int _i39 = 0; _i39 < _list38.size; ++_i39) {
                        String _elem40;
                        _elem40 = iprot.readString();
                        struct.words.add(_elem40);
                    }
                }
                struct.setWordsIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.postags = new ArrayList<String>(_list41.size);
                    for (int _i42 = 0; _i42 < _list41.size; ++_i42) {
                        String _elem43;
                        _elem43 = iprot.readString();
                        struct.postags.add(_elem43);
                    }
                }
                struct.setPostagsIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.ners = new ArrayList<String>(_list44.size);
                    for (int _i45 = 0; _i45 < _list44.size; ++_i45) {
                        String _elem46;
                        _elem46 = iprot.readString();
                        struct.ners.add(_elem46);
                    }
                }
                struct.setNersIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                    struct.heads = new ArrayList<Integer>(_list47.size);
                    for (int _i48 = 0; _i48 < _list47.size; ++_i48) {
                        int _elem49;
                        _elem49 = iprot.readI32();
                        struct.heads.add(_elem49);
                    }
                }
                struct.setHeadsIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.deprels = new ArrayList<String>(_list50.size);
                    for (int _i51 = 0; _i51 < _list50.size; ++_i51) {
                        String _elem52;
                        _elem52 = iprot.readString();
                        struct.deprels.add(_elem52);
                    }
                }
                struct.setDeprelsIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.srls = new ArrayList<Srl>(_list53.size);
                    for (int _i54 = 0; _i54 < _list53.size; ++_i54) {
                        Srl _elem55;
                        _elem55 = new Srl();
                        _elem55.read(iprot);
                        struct.srls.add(_elem55);
                    }
                }
                struct.setSrlsIsSet(true);
            }
        }
    }

}

